#To set a password-less authentication/(ssh) on a Jump-server to other servers
- Generate a public and private key pair on the jump host using the ssh-keygen command. When prompted for a passphrase, press Enter to leave it blank:
- This will generate a public and private key pair in the ~/.ssh directory.

   ssh-keygen
   
- Copy the public key to the authorized_keys file on each app server. You can use the following command to copy the key to app server

   ssh-copy-id -i ~/.ssh/id_rsa.pub username@ip_address

- Test the password-less authentication by running the following command from the jump host

   ssh username@ip_address whoami

- This command should run the 'whoami' command on the app server as the sudo user 'username', without prompting for a password.
   
//Alternative

- After generating a public key for the jump-host, run the command below:

    ssh-copy-id -i ~/.ssh/id_rsa.pub username@ip_address
   
=================================================================================================
#To Change Hostname
  
  sudo hostnamectl set-hostname newhostname

#To look for a filename in a dir/folder
  
  sudo find /var/ -name filename*

#What is IP Address assigned to the physical interface eth1
  
  ip addr show eth1
==================================================================================================
#To switch to a user on another server
  ssh -l username ip-address or hostname    NB: "user password required"
====================================================================================================
# To Create a user named siva in App Server 3 without a home directory.
sudo adduser -r siva
===================================================================================================
#To delete a user
  userdel username / userdel -r username
====================================================================================================
#To create a non-interative user
  useradd -s /bin/false username
====================================================================================================
#To check OS running
cat /etc/*release" or "uname -a
=================================================================================================
#To Set banner / motd
Paste the message into /etc/issue, /etc/issue.net for banner then /etc/motd for motd.
=======================================================================================================
#To check timezone
   timedatectl
#To Change Timezone
   sudo timedatectl set-timezone America/New_York
=====================================================================================================
#To change user shell from bash to bourne
   chsh -s /bin/sh - make require users password
Also note that "util-linux-user" is the the package responsible for shell packages
==================================================================================================
#To create a user on a App Server. Set expiry date to 2021-02-17 in the Datacenter
sudo useradd -e 2021-02-17 username
=================================================================================================
#To disable direct ssh root login
   sudo vi /etc/ssh/sshd_config file , then edit line: #PermitRootLogin yes to: PermitRootLogin no
NB: Restart service to implement changes
    sudo systemctl restart sshd
=================================================================================================
#To Configure Apache to listen on port 8087, Also Configure Apache to add some redirects
#Normally apache includes configurations from the etc/apache2/sites-available/ folder, it could have some configuration on there.
#If it doesn't exist, just create a new include on that folder and create the folder. and you will have configurations like this as a configuration's file content:
#We need to edit the apache configuration file in /etc/httpd/conf/httpd.conf
   sudo vi /etc/httpd/conf/httpd.conf
#Write the VirtualHost block to redirect the sites as required after the last line of the configuration file.
<VirtualHost *:8087>
    ServerName stapp01.stratos.xfusioncorp.com
    Redirect 301 / http://www.stapp01.stratos.xfusioncorp.com:8087/
</VirtualHost>

<VirtualHost *:8087>
    ServerName www.stapp01.stratos.xfusioncorp.com
    Redirect 302 /blog/ http://www.stapp01.stratos.xfusioncorp.com:8087/news/
</VirtualHost> 

#Restart httpd service
   sudo systemctl restart httpd
=============================================================================================================
#To find all files owned by the user "anita" in the directory /home/usersdata and copy them to the /beta directory while preserving the directory structure,
you can use the following command:

      find /home/usersdata -type f -user anita -exec cp --parents {} /beta \;

#To know the numbers of files having (.php) extension in the /var/www/html/ecommerce directory    
      find /var/www/html/ecommerce -type f -name "*.php" | wc -l
      
#NB: The command will use the 'find' command to search for all files (-type f) owned by the user "anita" (-user anita) in the directory /home/usersdata,
and for each file found, it will use the 'cp' command to copy it to the /beta directory while preserving the directory structure (--parents).
The {} symbol is a placeholder for the filename found by 'find', and the \; symbol indicates the end of the 'exec' command.
Also,  note that this command will only copy files owned by the user "anita" and not any directories or subdirectories.
If you also want to copy directories owned by the user "anita", you can remove the '-type f' option from the command.
=================================================================================================================
#To hide the version number of the Apache web server, you can modify the Apache configuration file located at /etc/httpd/conf/httpd.conf on the App-Server.
sudo vi /etc/httpd/conf/httpd.conf
#To configure Apache web server to hide version number, search for the line with "ServerTokens" and add "Prod" in front of it.
#If the line doesn't exist, Look for a section that begins with <IfModule mod_headers.c>. If this section is not present, you can add it.
<IfModule mod_headers.c>
ServerTokens Prod
</IfModule>
#To disable directory browser listing on the /var/www/html/ecommerce directory, look for the <Directory> section that contains /var/www/html/ecommerce. If it does not exist, add a new
#section:
<Directory "/var/www/html/ecommerce">
    Options -Indexes
</Directory>
#Save the file
#Restart httpd
sudo systemctl restart httpd
========================================================================================================================
#Mariadb service is down on the database server
#Check logs for details of issue
journalctl -xe | grep mariadb
#logs shows issue with file ownership and permission issues of /var/lib/mysql file
#change file ownership and group to mysql user
sudo chown -R mysql:mysql /var/lib/mysql
#Now start the mariadb.service service
sudo systemctl start mariadb.service
#Check status to confirm functionality
sudo systemctl status mariadb
=====================================================================================================================================
#The steps to change the default runlevel to boot in GUI mode may vary depending on the operating system being used on the app servers.
However, the general steps are as follows:
Enter the command to edit the default runlevel configuration file.
For example, on a system using systemd, the command may be:
   
   sudo systemctl set-default graphical.target
 
//Alternative:
    - Log in to the server as root or a user with sudo privileges.
    - Open the file "/etc/inittab" with a text editor.
    - Locate the line that starts with "id" and has a default runlevel number (usually 3 or 5).
    - Change the default runlevel number to 5, which is the runlevel for GUI mode.
    - Save the file and exit the text editor.
NB:
It is important to note that changing the default runlevel can have consequences on the system's behavior and security.
Therefore, it is advisable to test the changes in a non-production environment before implementing them in a production environment.
Also, make sure to document any changes made to the system for future reference.
===============================================================================================
#To install cron-job package, start crond service and add a cron job for root user on a App-Servers

     sudo yum install cronie
     sudo systemctl start crond
     
#Add a cron job for root user to echo "hello" every 5 minutes:
   
     sudo crontab -e
     */5 * * * * echo hello > /tmp/cron_text
Save and exit the file.

- This will run the cron job every 5 minutes and append "hello" to the file /tmp/cron_text.
- You can verify that the cron job is running by checking the contents of the file /tmp/cron_text.
===============================================================================================================================
#To Delete lines containing a certain word like "copyright" in a linux file having many sentences

     grep -v "copyright" /input_file.txt > /output_file.txt

NB: The original file "input_file.txt" will remain unchanged, while "output_file.txt" will contain all the lines from "input_file.txt",
except those that contain the word "copyright".

#To replace all occurrence of word "the" to "for" in a linux file having many sentences

     sed 's/\bthe\b/for/g' /input_file.txt > /output_file.txt
     
NB: The \b ensures that only the word "the" is replaced, and not words containing "the" as a substring

     sed -i 's/the/for/g' /input_file.txt
     
NB: This command will modify the original file "input_file.txt" in-place,
so make sure to take a backup of the file before running this command if you want to preserve the original contents of the file.
==================================================================================================================================================
#They have a mail server in Stork DC where they are using postfix mail transfer agent. Postfix service seems to fail.
#Try to identify the root cause and fix it.
#First check the postfix configuration syntax file for any error
    sudo postfix check
#I got these two errors
#1)postfix: warning: /etc/postfix/main.cf, line 135: overriding earlier entry: inet_interfaces=all
#2)postfix: fatal: parameter inet_interfaces: no local interface found for ::1
#For one, the error message is a warning that the "inet_interfaces" parameter has been defined more than once in the main.cf file and we need to remove
#the duplicate entry by editing the /etc/postfix/main.cf file.
    vi /etc/postfix/main.cf file
#search for inet_interfaces and delete the duplicate entry leaving the one with inet_interfaces = localhost
#Then under # Enable IPv4, and IPv6 if supported, set inet_protocols = ipv4
#save file and restart service
    sudo systemctl restart postfix
=========================================================================================================================================================
#To Install SElinux package on server
#Update yum package first
    sudo yum update
#Install selinux and it dependencies
    sudo yum install -y policycoreutils policycoreutils-python selinux-policy selinux-policy-targeted setools setools-console mcstrans setroubleshoot
#Enable selinux in the /etc/selinux/config by changing SELINUX=disabled to SELINUX=enforcing
#Reboot server to complete status
#Check selinux status with;
    sudo sestatus
============================================================================================================================================================
# An App Server is having some DNS resolution issues, so we want to add some additional DNS nameservers on this server.
As a temporary fix we have decided to go with Google public DNS (ipv4). Please make appropriate changes on this server.
Edit the (/etc/resolv.conf) file and add the google DNS
sudo vi /etc/resolv.conf
- Then add at the top of the file ;
   nameserver 8.8.8.8
   nameserver 8.8.4.4
- Save and exit editor
- Test the DNS resolution by running the following command
   nslookup example.com
            OR
   dig example.com
   
//Alternative
- To make the changes persistent across reboots, you may need to modify the (/etc/systemd/resolved.conf) file
     [Resolve]
   DNS=8.8.8.8 8.8.4.4
- Save and exit editor
- Restart the systemd-resolved service to apply the changes
   sudo systemctl restart systemd-resolved
=================================================================================================================================================================
#To create a script to install postfix package on all the application servers.
Also, once installed, make sure it is enabled to start during boot.
#!/bin/bash
read -sp 'Enter your password: ' PASSWORD
echo $PASSWORD | sudo -S yum update -y
echo $PASSWORD | sudo -S yum install httpd -y
sleep 30
echo $PASSWORD | sudo -S sed -i 's/inet_protocols = all/inet_protocols = ipv4/g' /etc/postfix/main.cf
echo $PASSWORD | sudo -S systemctl enable postfix
echo $PASSWORD | sudo -S systemctl status postfix
===========================================================================================================================================================================
#On storage server a private and public keys were stored /home/*_key.asc. Use those keys to perform the following actions.
#Encrypt /home/encrypt_me.txt to /home/encrypted_me.asc.
#Decrypt /home/decrypt_me.asc to /home/decrypted_me.txt. (Passphrase for decryption and encryption is kodekloud).
#Seeing that the files to use belong to root user then it is advisable to switch to root user first.
    sudo -i
#We can now create a key id and import it for the recipient
    cd /home
    gpg --import private_key.asc; gpg --import public_key.asc #This creates a key id for the recipient
#we can view the imported keys using;
    gpg --list-keys
#use the created key to encrypt the file
    gpg --encrypt --recipient "kodekloud@kodekloud.com" --output encrypted_me.asc encrypt_me.txt
#To decrypt the file
    gpg --output decrypted_me.txt --decrypt decrypt_me.asc
#enter passphrase
====================================================================================================================================================================
#To install httpd package on an App Server using yum and configure it to run on 6400 port.
#Create an index.html file under Apache's default document root i.e /var/www/html and add below given content in it.: "Welcome to the Future!"
#Configure Apache to enable below mentioned headers:
#X-XSS-Protection header with value 1; mode=block
#X-Frame-Options header with value SAMEORIGIN
#X-Content-Type-Options header with value nosniff
#Note: You can test using curl on the given app server as LBR URL will not work for this task.
#Install httpd and configure port using this script
  #!/bin/bash
  read -sp 'Enter your password: ' PASSWORD
  echo $PASSWORD | sudo -S yum update -y
  echo $PASSWORD | sudo -S yum install httpd -y
  sleep 20
  echo $PASSWORD | sudo sed -i 's/^Listen 80$/Listen 8081/' /etc/httpd/conf/httpd.conf
  echo $PASSWORD | sudo -S systemctl start httpd
  echo $PASSWORD | sudo -S systemctl enable httpd
  echo $PASSWORD | sudo -S systemctl status httpd
#To add the content into /var/www/html/index.html, create an index.html file in the path /var/www/html/
  sudo touch /var/www/html/index.html
#Paste the content into it.
   <!DOCTYPE html>
   <html>
   <head>
	   <title>Welcome to the Future!</title>
   </head>
   <body>
	   <h1>Welcome to the Future!</h1>
   </body>
   </html>
#To configure Apache to mention the headers, vi into /etc/httpd/conf/httpd.conf and search for the section with "<Directory "/var/www/html">"
#Input the details in that section and save
   Header set X-XSS-Protection "1; mode=block"
   Header set X-Frame-Options "SAMEORIGIN"
   Header set X-Content-Type-Options "nosniff"
#Restart httpd service then run (curl -v localhost:port) to verify result.
====================================================================================================================================================================
#To install squid package in an app servers.
#Using logrotate configure squid logs rotation to monthly and keep only 3 rotated logs.
#To install haproxy
   sudo yum install squid -y
#To configure haproxy with logrotate as required, edit /etc/logrotate.d/haproxy and input the required parameter.
   sudo vi /etc/logrotate.d/squid
#change weekly to monthly and change rotate from the default 5 to 3. Save and exit.
========================================================================================================================================
#We have a backup management application UI hosted on the backup server in the DC.
#That backup management application code is deployed under Apache on the backup server itself, and Nginx is running as a reverse proxy on the same server.
#Apache and Nginx ports are 8088 and 8098, respectively. We have iptables firewall installed on this server, make the appropriate changes to fulfill the requirements mentioned below:
#We want to open all incoming connections to Nginx's port and block all incoming connections to Apache's port, also make sure rules are permanent.
//SOLUTION:
- To allow incoming connections to Nginx's port(8098), run the command below:
   sudo iptables -A INPUT -p tcp --dport 8098 -j ACCEPT

- To block incoming connections to Apache's port(8088), run the command below:
   sudo iptables -A INPUT -p tcp --dport 8088 -j DROP

- To save iptables rules permanently, run the command below:
   sudo /sbin/iptables-save > /etc/sysconfig/iptables
NB: This command may require you to switch to the root-user for proper file excution permission.
#Restart Iptable service to apply the rules
   systemctl restart iptables
#You can confirm the rules we just added using;
   iptables -L -n
=====================================================================================================================================================================
#To configure a local yum repository on a Backup Server as per details given below.
#We have some packages already present at location /packages/downloaded_rpms/ on the Backup Server.
#Create a yum repo named yum_local and make sure to set Repository ID to yum_local. Configure it to use package's location /packages/downloaded_rpms/.
#Install package httpd from this newly created repo.
//SOLUTION:
#We are supposed to install createrepo but i noticed it has already been installed. So we would just go ahead to create a metadata for the yum repo.
     sudo createrepo /packages/downloaded_rpms/
#We then have to Create a repository configuration file named epel_local.repo in the /etc/yum.repos.d/
     sudo vi /etc/yum.repos.d/yum_local.repo
#Paste the following content in it

[yum_local]
name=Local Yum Repo
baseurl=file:///packages/downloaded_rpms/
enabled=1
gpgcheck=0

#Save and close.
#We can now install httpd with yum for the newly created repo.
   sudo yum install httpd --enablerepo=yum_local
========================================================================================================================
#Find all similar files and copy them to a safe location for further investigation. Accomplish the task as per the following requirements:
- On App Server 3 at location /var/www/html/beta find out all files (not directories) having .css extension.
- Copy all those files along with their parent directory structure to location /beta on same server.
- Please make sure not to copy the entire /var/www/html/beta directory content.

//SOLUTION:
Run this command

sudo find /var/www/html/beta -type f -name "*.css" -exec cp --parents {} /beta \;

NB: Make sure user has SUDO privilleges or you can as well run command as root user
===========================================================================================================================
Install and configure nginx on App Server 3. On App Server 3 there is a self signed SSL certificate and key present at location /tmp/nautilus.crt and /tmp/nautilus.key.
#Move them to some appropriate location and deploy the same in Nginx. Create an index.html file with content Welcome! under Nginx document root.
#For final testing try to access the App Server 3 link (either hostname or IP) from jump host using curl command. For example curl -Ik https://<app-server-ip>/.
------------------------------------------------------------------------------------------------------
#Install nginx
sudo yum install epel-release -y
sudo yum install nginx -y
#Move certificates to appropriate location
sudo mkdir -p /etc/nginx/ssl
sudo mv /tmp/nautilus.crt /etc/nginx/ssl/
sudo mv /tmp/nautilus.key /etc/nginx/ssl/
#Configure nginx.
sudo vi /etc/nginx/nginx.conf
#Uncomment the https section and edit the certificate and key lines to the correct location we copied them to.
ssl_certificate /etc/nginx/ssl/nautilus.crt;
ssl_certificate_key /etc/nginx/ssl/nautilus.key;

//OPTIONAL:
#Also add this inside that block. 
location / {
        root /usr/share/nginx/html;
        index index.html;
    }
    
#Navigate to /usr/share/nginx/html and delete the index.html symbolic link then create a new index.html and add "Welcome!"
cd /usr/share/nginx/html
sudo rm -f index.html
sudo vi index.html
#Save the file
#Set permission to rwx for all
sudo chmod 777 index.html
#Restart nginx
sudo systemctl restart nginx
#Exit to the jump server and run
curl -Ik https://<app-server-ip>/
=====================================================================================================================================================================================
#To give user "james" sudo access on all app servers on the Datacnter
   sudo vi /etc/sudoers
#Look for the comment section that says 'add user to run all commands', add the following line under the wheel% tag
   james ALL=(ALL) NOPASSWD:ALL
#Save and exit editior
#OR just run this command to do it automatically
   sudo echo "james ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/james
=========================================================================================================================================================
#To set-up a common email server in Stork DC server using postfix as mail transfer agent and dovecot as an IMAP/POP3 server.
#Install and configure postfix on Stork DC mail server. Create an email account javed@stratos.xfusioncorp.com identified by (8FmzjvFU6S).
#Set its mail directory to /home/javed/Maildir. Install and configure dovecot on the same server.

- First install the packages.
sudo yum install postfix -y
sudo yum install dovecot -y
- Then modifiy postfix.
sudo vi /etc/postfix/main.cf
- Add the following configurations:
myhostname = mail.stratos.xfusioncorp.com
mydomain = stratos.xfusioncorp.com
myorigin = $mydomain
inet_interfaces = all
mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain
home_mailbox = Maildir/
- Save and exit
- Create mail user account and set maildir ownership.
sudo useradd -m javed
sudo passwd javed #Add the password provided in the task when prompted to enter password in this case: 8FmzjvFU6S
sudo mkdir /home/javed/Maildir
sudo chown -R javed:javed /home/javed/Maildir
sudo chmod -R 700 /home/javed/Maildir
- Configure created user in Postfix Virtual Mailbox.
echo "javed@stratos.xfusioncorp.com javed/Maildir/" | sudo tee -a /etc/postfix/vmailbox
- Then we configure Dovecot.
sudo vi /etc/dovecot/dovecot.conf
- Paste the following lines in it.
listen = *
mail_location = maildir:/home/%u/Maildir
auth_username_format = %u
- Save and quit.
- Additioal configuration for Dovecot.
sudo vi /etc/dovecot/conf.d/10-auth.conf
- Search for "#disable_plaintext_auth = yes" and change the "yes" to "no".
sudo vi /etc/dovecot/conf.d/10-ssl.conf
- Search for "ssl = required" and change it to "ssl = yes".
- Generate SSL for dovecot
sudo openssl req -new -x509 -days 365 -nodes -out /etc/pki/dovecot/certs/dovecot.pem -keyout /etc/pki/dovecot/private/dovecot.pem
- The above command will bring up other prompt, just keep pressing enter until the end of the prompt.
- Set ownership permission.
sudo chown -R dovecot:dovecot /etc/pki/dovecot
sudo chmod 400 /etc/pki/dovecot/private/dovecot.pem
- Finally restart services for Postfix and Dovecot.
sudo systemctl restart postfix
sudo systemctl restart dovecot
==============================================================================================================================================================
#To install tomcat server on the App Server using yum. Configure it to run on port 5002.
#Deploy the ROOT.war file located at /tmp on the Jump Server to the tomcat server and make sure the webpage works directly on base URL.
#Example: Without specifying any sub-directory anything like this http://URL/ROOT .

#Install the package on the app server
sudo yum install tomcat -y
#Modify the tomcat configuration file
sudo vi /etc/tomcat/server.xml
#Identify the tag/block in the file and edit appropriately
<Connector port="5002" protocol="HTTP/1.1"
           connectionTimeout="20000"
           redirectPort="8443" />
#Save and exit
#Restart service
sudo systemctl restart tomcat
#Deploy the .war file from the Jump server
scp /tmp/ROOT.war steve@172.16.238.11:/tmp
#SSH into the app/tomcat server and execute the following commands:
sudo cp /tmp/ROOT.war /var/lib/tomcat/webapps
sudo systemctl restart tomcat
=============================================================================================================================================================================
