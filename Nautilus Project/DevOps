#Create a deployment nagios-deployment for Nagios core.
#The container name must be nagios-container and it must use jasonrivers/nagios image.
#Create a user and password for the Nagios core web interface, user must be xFusionCorp and password must be LQfKeWWxWD. (you can manually perform this step after deployment)
#Create a service nagios-service for Nagios, which must be of targetPort type, nodePort must be 30008.

SOLUTION:
- First develop a .yaml manifest file to create a nagios deployment pod and service with the provided requirements
- To run the .yaml files run the command below
kubectl apply -f filename.yaml
- After creating the deployment pod and service, you have to create user and password manually
#Run the following commands to create user and password:
- Identify the pod name in which nagios was deployed into
kubectl get all
#OR
kubectl get service nagios-service
#OR
kubectl get pod
- Switch to the pod/container CLI
kubectl exec -it <nagios-pod-name> -- /bin/bash
cd /opt/nagios/etc/
htpasswd -Bc htpasswd.users <username>
- It will prompt for new password, enter the required password.
- Exit the pod/container CLI and test the Nagios web interface on the terminal
==========================================================================================================================================================================================
#Install apache2 in "kkloud" container using apt that is running on App Server 3 in Stratos Datacenter
#Configure Apache to listen on port 5004 instead of default http port. Do not bind it to listen on specific IP or hostname only, 
(i.e it should listen on localhost, 127.0.0.1, container ip, etc)
#Make sure Apache service is up and running inside the container.
#Keep the container in running state at the end.

SOLUTION:
- First switch to pod/container CLI in the required App Server.
sudo docker exec -it kkloud /bin/bash
apt install apache2 -y
apt install nano
- Also while in pod CLI configure the apache2 service to Listen on the required port.
sudo nano /etc/apache2/ports.conf
- Look for the line that has Listen and modifiy to "Listen = 5004".
- Exit the editor and the restart service.
service apache2 restart
service apache2 status
- Exit the container/pod CLI, then check if the container is in running state.
exit
sudo docker ps
================================================================================================================================================================================
#Create a pod named "pod-httpd" using httpd image with latest tag only and remember to mention the tag (httpd:latest).
#Labels app should be set to "httpd_app", also container should be named as "httpd-container".

SOLUTION:
- Create a .yaml manifest file to create the pod/container using the requirements given.
- To execute the .yaml file, Run:
kubectl create -f filename.yaml
- Confirm if the pod is created and ready.
kubectl get pod
===================================================================================================================================================================================
#Create a generic secret named "news", it should contain the password/license-number present in news.txt file.
#We already have a secret key file "news.txt" under /opt location on jump host.
#Also create a pod named "secret-xfusion".
#Configure pod's spec as container name should be "secret-container-xfusion", image should be "fedora" preferably with latest tag (remember to mention the tag with image).
#Use sleep command for container so that it remains in running state.
#Consume the created secret and mount it under "/opt/apps" within the container.
#Verify to check the secret key under the mounted path "/opt/apps".
#Please make sure pod/pods are in running state, also validation can take some time to complete so keep patience.

SOLUTION:
- First develop the YAML manifest for creating the secret and the pod as per your requirements.
- Before applying the manifest file, look for the line that has "<base64-encoded content of news.txt>" and replace it with the base64-encoded content of the beta.txt file.
- You can encode the file content using the "base64" command-line tool in the /opt.
- Do so by running the command below:
base64 -w 0 news.txt
- Here's an example of how the encoded content would look (NWVjdXIzCg==).
- Replace <base64-encoded content of news.txt> in the already developed manifest with the actual base64-encoded content that you obtained.
- Then apply the .yaml manifest file.
kubectl apply -f filename.yaml
- To verify you can exec into the container to check.
kubectl exec -it secret-xfusion -c secret-container-xfusion -- /bin/bash
ls /opt/apps/news.txt
- To make sure pod/pods are in running state.
kubectl get pods
=================================================================================================================================================================================
#Create a namespace "jenkins".
#Create a Service for jenkins deployment, service name should be "jenkins-service" under jenkins namespace, type should be NodePort, nodePort should be "30008".
#Create a Jenkins Deployment under jenkins namespace.
- It should be name as jenkins-deployment.
- Labels app should be jenkins.
- Container name should be jenkins-container.
- Use jenkins/jenkins image.
- ContainerPort should be 8080 and replicas count should be 1.
#Make sure you are able to access the Jenkins login screen in the browser.

SOLUTION:
- Create the YAML manifest to create the namespace, service, and deployment for Jenkins as per your requirements.
- Save the above YAML manifests into separate files (e.g., jenkins-namespace.yaml, jenkins-service.yaml, jenkins-deployment.yaml).
- Run the following commands to execute the rest of the task:
kubectl apply -f jenkins-namespace.yaml
kubectl apply -f jenkins-service.yaml
kubectl apply -f jenkins-deployment.yaml

#Make sure to wait for the pods to be in running state.
- To check the pod status, Run:
kubectl get pods -n jenkins
=================================================================================================================================================================
