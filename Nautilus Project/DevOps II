#Countdown job in Kubernetes.
#Create a job "countdown-xfusion".
#The spec template should be named as countdown-xfusion (under metadata), and the container should be named as "container-countdown-xfusion".
#Use image "centos" with "latest" tag only and remember to mention tag, and restart policy should be "Never".
#Use command (for i in 10 9 8 7 6 5 4 3 2 1 ; do echo $i ; done)


//SOLUTION:
#Create the job template as a .yaml manifest.
- The sample of the file can be found in this link --->  https://github.com/mightygull/Yaml-Manifest-Files/blob/main/Jobs%20in%20Kubernets.yaml
#Apply the template.
kubectl apply -f <file-name>.yaml
#Verify if job is created according to template.
kubectl get jobs
kubectl logs <job-name>
kubectl logs <pod-name>
kubectl get pods --selector=job-name=<job-name> --output=jsonpath={.items..metadata.name}
- Replace <job-name> with the actual name of the job.
========================================================================================================================================================================================
#Deploy Node App on Kubernetes.
#Create a deployment using gcr.io/kodekloud/centos-ssh-enabled:node image, replica count must be 2.
#Create a service to expose this app, the service type must be NodePort, targetPort must be 8080 and nodePort should be 30012.
#Make sure all the pods are in Running state after the deployment.
#You can use any labels as per your choice.


//SOLUTION:
#To deploy the Node application on a Kubernetes cluster and meet the given requirements, you can use the following YAML configurations.
#Create a deployment.yaml & service.yaml manifest.
- Sample of the deployment file can be found in this link ---> https://github.com/mightygull/Yaml-Manifest-Files/blob/main/Node%20App%20in%20Kubernetes/node_app_deployment.yaml
- Sample of the service file can be found in this link ---> https://github.com/mightygull/Yaml-Manifest-Files/blob/main/Node%20App%20in%20Kubernetes/node_app_service.yaml
#Apply the configured YAML files in the following order.
kubectl apply -f deployment.yaml
kubectl apply -f service.yaml
#Verify if the application is running.
kubectl get pods
======================================================================================================================================================================================
#Pull Docker Image.
#Pull busybox:musl image on App Server 2 in Stratos DC and re-tag (create new tag) this image as busybox:local.


//SOLUTION:
#I noticed that you have to use elevated permission for each command.
#To pull the image
sudo docker pull busybox:musl
#To re-tag the image
sudo docker tag busybox:musl busybox:local
=======================================================================================================================================================================================
#Save, Load and Transfer Docker Image.
#On App Server 1 save the image "blog:nautilus" in an archive.
#Transfer the image archive to App Server 3.
#Load that image archive on App Server 3 with same name and tag which was used on App Server 1.


//SOLUTION:
#Connect  to App-Server 1 terminal using SSH.
#Create the image archive ".tar".
sudo docker save -o blog_nautilus.tar blog:nautilus
#Transfer file to App-Server 3.
sudo scp blog_nautilus.tar user@<stapp03-ip-address>:/home/user
#Make sure the docker service is up and running on the Servers.
sudo systemctl status docker
sudo systemctl start docker
- Run commands for both Servers.
#Load the image on App-Server 3.
sudo docker load -i blog_nautilus.tar
======================================================================================================================================================================================
