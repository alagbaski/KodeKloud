#Git Install and Create Bare Repository.
#Create a Git repository on Storage server in Stratos DC as per details given below.
- Install git package using yum on Storage server.
- After that create a bare repository /opt/official.git (make sure to use exact name).


//SOLUTION:
#Install the Git package using yum.
sudo yum install git
#Create a bare repository at the specified location (/opt/official.git).
sudo mkdir /opt/official.git
sudo git init --bare /opt/official.git
==========================================================================================================================================================================
#Git Delete Branches.
#On Storage server in Stratos DC delete a branch named "xfusioncorp_demo" from "/usr/src/kodekloudrepos/demo" git repo.


//SOLUTION:
#Log in to the Storage server, and navigate to the directory where the Git repository "demo" is located.
cd /usr/src/kodekloudrepos/demo
#To delete the branch "xfusioncorp_demo"
sudo git branch -d xfusioncorp_demo
#You can force the deletion using the -D option.
sudo git branch -D xfusioncorp_demo
#Verify.
git branch
======================================================================================================================================================================
# Create a bash script named ecommerce_backup.sh which should accomplish the following tasks for taking websites backup.
They have a static website running on App-Server 2 in the Datacenter.
(Also remember to place the script under /scripts directory on specified App Server)
- Create a zip archive named xfusioncorp_ecommerce.zip of /var/www/html/ecommerce directory
- Save the archive in /backup/ on App Server 2.
  This is a temporary storage, as backups from this location will be clean on weekly basis.
  Therefore, we also need to save this backup archive on the Backup Server.
- Copy the created archive to the Backup Server in /backup/ location.
- Make sure script won't ask for password while copying the archive file. Additionally, the respective server user must be able to run it.
  
  #!/bin/bash

# Create a zip archive of ecommerce directory
zip -r xfusioncorp_ecommerce.zip /var/www/html/ecommerce

# Save the archive in /backup/ on App Server 2
mv xfusioncorp_ecommerce.zip /backup/

# Copy the archive to the Backup Server
scp /backup/xfusioncorp_ecommerce.zip nautilus-backup-user@server-ip-addr:/backup/

- Save and exit the editior
NB:
# Make sure script won't ask for password while copying the archive file
# To achieve this, we need to set up passwordless SSH login between the two servers.
# Here is a summary of the steps:
# - On App Server 2, generate a new SSH key pair for the user who will run the script
#   (e.g. banner) using the command: ssh-keygen -t rsa
# - Copy the public key to the Backup Server using the command:
#   ssh-copy-id username@nautilus_backup_server_addr
# - Test the passwordless login using the command: ssh username@nautilus_backup_server_addr
#   If successful, the script won't ask for password during the "scp" command.

# To make sure the script is executable by the respective server user
  sudo chmod 755 scriptname.sh
- Then run the script.
=====================================================================================================================================
#Create an SFTP user yousuf and set its password to ksH85UJjhb.
#Password authentication should be enabled for this user.
#Set its ChrootDirectory to /var/www/app.
#SFTP user should only be allowed to make SFTP connections.

- The Script below should handle the task.
#!/bin/bash
echo "collecting environmental variables"
sleep 3
echo "Please provide the app server password for sudo access"
read -sp "server password: " serverpass
echo "Please provide SFTP user username"
read -p "SFTP user's username: " username
echo "Please provide SFTP user's password"
read -sp "Input SFTP password: " password
echo "Creating SFTP user's details..."
sleep 3
#Create the SFTP user and assign password
echo $serverpass | sudo adduser $username
echo $password | sudo passwd $username --stdin
echo "SFTP user created successfully"
echo "Creating Chroot Directory and Permission assigment..."
sleep 3
#Create Chroot Directory and assign permissions
sudo mkdir -p /var/www/app
sudo chown -R root:root /var/www/app
sudo chmod -R 755 /var/www/app
echo "Chroot directory created and permission assignment successful"
#Configure SFTP access and restart SSH service
sudo tee -a /etc/ssh/sshd_config << EOF
Match User $username
        ChrootDirectory /var/www/app
        ForceCommand internal-sftp
        X11Forwarding no
        AllowTcpForwarding no
        PasswordAuthentication yes
        AllowAgentForwarding no
        PermitTunnel no
EOF
sudo systemctl restart sshd
sleep 5
if [ $? -eq 0 ]
then echo "SFTP configurations successful"
else
echo "Some issues with SFTP configurations"
fi
====================================================================================================================================================================
#Install and configure PostgreSQL database on Nautilus database server.
#Create a database user kodekloud_aim and set its password to B4zNgHA7Ya.
#Create a database kodekloud_db8 and grant full permissions to user kodekloud_aim on this database.
#Make appropriate settings to allow all local clients (local socket connections) to connect to the kodekloud_db8 database through kodekloud_aim user using md5 method
(Please do not try to encrypt password with md5sum).
#At the end its good to test the db connection using these new credentials from root user or server's sudo user.

#Update yum package and Install Postgresql
sudo yum update -y
sudo yum install -y postgresql-server
#Initialize, Start and Enable the Database Service
sudo postgresql-setup initdb
sudo systemctl start postgresql
sudo systemctl enable postgresql
#Switch to the PostgreSQL user
sudo -u postgres psql
#Create db user, assign password, create database and privileges
CREATE USER kodekloud_aim WITH PASSWORD 'B4zNgHA7Ya';
CREATE DATABASE kodekloud_db8;
GRANT ALL PRIVILEGES ON DATABASE kodekloud_db8 TO kodekloud_aim;
#Configure db access for local client connection
sudo vi /var/lib/pgsql/data/pg_hba.conf
#Search for the line that has "# "local" is for Unix domain socket connections only"
#Comment out the existing "local" entry and add:
local   kodekloud_db8    kodekloud_aim    md5
#Save file and exit then restart db service.
sudo systemctl restart postgresql
#Test db connection with root user
#Switch to root user
sudo -i
#Connet to database with the precreated credentials
psql -U kodekloud_gem -d kodekloud_db3
#Input password (B4zNgHA7Ya)
#We ca run a simple command to verify
SELECT current_database();
================================================================================================================================================================================
